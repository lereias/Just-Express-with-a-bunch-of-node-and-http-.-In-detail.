Express is closely connected to many frameworks such as
React, Angular

Express is connected to Node.JS

Express is connected to mongoDB and MySQL

Express is also connected to socket.io

Pre-Express
1. HTTP (HyperText Transfer Protocol)
   ~ heart of all web server
   ~ TCP / UDP
     o networking protocol
2. NodeJS web server
   * express is just a package of node
3. How I do node


1. HTTP

* cloud is not just actually software but rather have a
  cloud computer

* internet is just a connection of computers to one
  another

* packets are the data that is sent from one computer
  to another

* client sends data to server, server sends data to
  client

* node is involve in the server and express is involve
  in the networking process

* packet has 5 layers (bottom to top):
  ~ Physical
    o cables, the actual cables that links computers
  ~ Link
    o wifi, ethernet connection
  ~ Network / internet
    o IP
  ~ Transport
    o UDP / TCP    
  * combination of Network and Transport Layer is called
    the internet protocol suite (TCP / IP)
  ~ Application
    o HTTP, FTP, SSH, SMTP

* Transport layer creates 2 to the 16 number of ports
  (~ 65000)

* HTTP request will originate from port 49742 wants to
  talk to port 80 on another computer, that request will
  get handed off to the transport layer
  * it will get wrapped up in what's called a segment
  * segment will have metadata:
    o destination port: 80
    o source port: 49742

* transport layer then passes it to the network layer for
  further processing
  * when it gets to the receiving machine, it will go
    through the process in reverse and eventually find
    the right port

* two different types of transport layer protocols:
  ~ UDP (User Datagram Protocol)
    o Lightweight
      * 8 bytes for a header
    o Connectionless
      * you can just send data without waiting for
        connection to establish
    o Consistency
      * send data no matter what
      * not care of packet loss
      * packets out of order
    o It is Fast
    o video games (Dota 2), real time communication, etc.

  ~ TCP (Transmission Control Protocol)
    o Connection-Based
      * three way handshake
        - hey I want to talk
        - sure!
        - send data
    o Reliable
      * delivery acknowledgement
        - data is acknowledged / received
      * retransmission
        - if data is not received, server sends client
          that it is not delivered so you can submit again
      * in-order packet
    o Congestion Control
      * provides latency to prevent packet loss
    * HTTP uses TCP because its reliable

* TCP / IP makes 2 computers talk to one another


HTTP
- hypertext transfer protocol
- in application layer
- used before basically for hypertext transfer
- info.cern.ch very first website
- it does not just pass html anymore:
  * images
  * 4k videos
  * MP4
- it is based on transport layer
- as a protocol is efficient
- http is only connected when required
- stateless
  * no dialogue
  * connected computers only know each other during the
    connection, after the connection they forget each
    other


* computer connect to ISP (Internet Server provider) then
  through TCP / IP send request for connection to server
* server says yes, sends to ISP, ISP sends to computer
* computer sends data to server through ISP and TCP / IP,
  part of it is the HTTP request
* request hits on the server, HTTP connection is cut,
  TCP connection still connected
* response from server will be sent to computer, response
  gets cut after hit, TCP connection will be gone,
  computer and server will forget each other

* HTTP message has 3 pieces:
  ~ Start line
    o single line
    o describes type of request
    * Request: get /blog http/1.1
      * http/1.1 is version of http
    * Response: http/1.1 404 or 500 or 200
    
  ~ header
    o specifies the request or describes body
    * contains meta data that is in key, value
      > one type is MIME type
        * content-type:text/html

  * there is a blank line between header and body to
    separate the body from the rest

  ~ body
    o actual stuff
    o content
    * html, binary data, etc.

* you can use curl to check the entire html message
  ~ curl -v www.google.com


HOW I DO NODE.JS
- use Visual Studio Code
* use any editor if you want to

* in terminal you can use "node <name of js file>" to run
  your js
* "ctrl + c" to exit out the process
* to make it not needed to exit out the process to take
  effect the new changes in js file, install nodemon:
  npm install -g nodemon
  * -g means global
  * nodemon is similar to the hot reloading of webpack

* in JavaScript you are not needed to include a semi-colon
  (;) at the end of each line, but in best practice you
  should

// http module to make http request responses
// http module is included in node.js
// http is native to NodeJS. We just have to ask for it
const http = require("http");

// the http module has a createServer method and taks 1
// argument
// 1. callback, callback, has 2 args: request (req),
// response (res)
// req and res are modules so use it instead
const server = http.createServer((req, res) => {
  console.log(req);
});

// * functions that do not have names (() => {}) are
// called arrow functions or rocket by robert bunch

// createServer returns an object with a listen method
// listen takes 2 arg:
// 1. port to listen for http traffic on
// * port can be anything
// * port should be more than 1000 for 100 and below is
// for root
server.listen(3000);

- in the browser, go to localhost:3000
- you will see the request of the port

const server = http.createServer((req, res) => {
  // console.log(req);
  // res = our way of responding to the requester
  // http message
  // 1. start-line - CHECK node will deal with that
  // 2. header
  // 3. body
  // writeHead (header) takes 2 args:
  // 1. status code
  // 2. object for the mime-type
  // write is used for the body
  // end to end it
  res.writeHead(200, { "content-type": "text/html" });
  res.write("<h1>Hello, World</h1>");
  res.end();
});

- to get the request do this one at above for the server
- do curl -v localhost:3000

*   Trying 127.0.0.1:3000...
* Connected to localhost (127.0.0.1) port 3000 (#0)

request:
> GET / HTTP/1.1
> Host: localhost:3000
> User-Agent: curl/7.83.1
> Accept: */*
>
* Mark bundle as not supporting multiuse

response:
< HTTP/1.1 200 OK
< content-type: text/html
< Date: Sat, 06 Aug 2022 02:42:33 GMT
< Connection: keep-alive
< Keep-Alive: timeout=5
< Transfer-Encoding: chunked
<
<h1>Hello, World</h1>* Connection #0 to host localhost left intact

* what path in port 3000 will always give the request and
  response object

* use postman to do some http requests
* type localhost:3000
* any http request will show the response

// this returns the current path you are in the
// localhost
console.log(req.url);

if (req.url === "/") {
  // the user wants the home page: we know, because the
  // reg object has / in the url property
  // res = our way of responding to the requester
  // http message
  // 1. start-line - CHECK node will deal with that
  // 2. header
  // 3. body
  // writeHead (header) takes 2 args:
  // 1. status code
  // 2. object for the mime-type
  // write is used for the body
  // end to end it
  res.writeHead(200, { "content-type": "text/html" });
  res.write("<h1>Hello, This is the home page!</h1>");
  res.end();
} else {
  res.writeHead(404, { "content-type": "text/html" });
  res.write(`<h1>Sorry, this isn't the page you're looking for!</h1>`);
  res.end();
}

* use template literal (``) than quotes ("" or '') for the
  body of the html message so that apostrophes will be
  usable

// we need the fs module to read the html file to put in
// body
// fs is native to NodeJS. We just have to ask for it
// fs gives node access to THIS computers file system.
const fs = require("fs");


res.writeHead(200, { "content-type": "text/html" });
// res.write("<h1>Hello, This is the home page!</h1>");

// bring content of this file to the variable
const homePageHTML = fs.readFileSync("node.html");
// does a buffer
//console.log(homePageHTML);

// write will write the buffer into the mime-type
res.write(homePageHTML);
res.end();

* you can go to devTools (select inspect element) and
  right click the part that you think is not working and
  select "open in new tab"

* you cannot import imgs in the html itself, you need
  another HTTP request for that

* you cannot import css files in the html itself, you need
  another HTTP request for that